# -*- coding: utf-8 -*-
"""
Created on Fri May 10 22:10:10 2019

MIT License

Copyright (c) 2019 Octavio Gonzalez-Lugo 

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LANL Eartquake prediction 
Final Submission 

@author: Octavio Gonzalez-Lugo

"""

###############################################################################
#                          Packages to use 
###############################################################################


import numpy as np
import pandas as pd
import xgboost as xgb
import matplotlib.pyplot as plt
import differint.differint as df

from sklearn import preprocessing as pr
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

import csv
from os import listdir
from os.path import isfile, join

###############################################################################
#                           Style functions  
###############################################################################

#A brief description
def PlotStyle(Axes,Title,x_label,y_label):
    
    Axes.spines['top'].set_visible(False)
    Axes.spines['right'].set_visible(False)
    Axes.spines['bottom'].set_visible(True)
    Axes.spines['left'].set_visible(True)
    Axes.xaxis.set_tick_params(labelsize=12)
    Axes.yaxis.set_tick_params(labelsize=12)
    Axes.set_ylabel(y_label,fontsize=14)
    Axes.set_xlabel(x_label,fontsize=14)
    Axes.set_title(Title)

###############################################################################
#                          Loading the data 
###############################################################################

"""

In this version of the script, the data used to train the model was generated by 
taking one data point every 100 points without filtering or any other process

"""

GlobalDirectory= r'C:\Users\ffc69\Documents\Proyectos\Competencias\Kaggle\LANL Earthquake Prediction'
DataDir=GlobalDirectory+'\\''train'

DataFile=DataDir+'\\'+'train.csv'
CoefficientsFile=GlobalDirectory+'\\'+'models'+'\\'+'scalers.csv'

###############################################################################
#                          Global variables 
###############################################################################

SeriesFragment=150000
DerOrders=np.linspace(-0.1, 0.25, 6, endpoint=True)
gScalers=np.genfromtxt(CoefficientsFile, delimiter=',')

MeanGlobal=gScalers[2]
StdGlobal=gScalers[3]

###############################################################################
#                    Time Series Processing functions 
###############################################################################

#Generates a Zero mean and unit variance signal 
def MakeScaledSeries(Signal,MeanValue,StdValue):
  StandardSignal=[(val-MeanValue)/StdValue for val in Signal]
  return StandardSignal

###############################################################################
#                        Feature Functions 
###############################################################################

#Calcculate the features for each sample 
def CalculateFeatures(Sample,Orders):
  
  """
  Sample: Time series fragment
  Orders: Array of non integer differentiation orders 
  """

  container=[]
  nSample=len(Sample)
  
  for order in Orders:
      
    derSample=df.GL(order,Sample,num_points=nSample)
    absSample=np.abs(derSample)
    container.append(np.log(1+np.mean(absSample)))
    container.append(np.mean(derSample))

  return container

#A brief description 
def MakeDataMatrix(DataFile,Orders):
  
  cFile=DataFile
  FeaturesData=[]
  TimeData=[]
  
  for i,chunk in enumerate(pd.read_csv(cFile, chunksize=SeriesFragment)):
    
    Sample=np.array(chunk['acoustic_data'])
    Time=np.array(chunk['time_to_failure'])
    ScaledSample=MakeScaledSeries(Sample,MeanGlobal,StdGlobal)
    TimeData.append(Time[-1])
    FeaturesData.append(CalculateFeatures(ScaledSample,DerOrders))

  return np.array(FeaturesData),np.array(TimeData)

###############################################################################
#                           Data Scaling  
###############################################################################

Xtrain0,Ytrain0=MakeDataMatrix(DataFile,DerOrders)
ToMinMax=pr.MinMaxScaler()
ToMinMax.fit(Xtrain0)
MMData=ToMinMax.transform(Xtrain0)

Xtrain,Xtest,Ytrain,Ytest=train_test_split(MMData,Ytrain0, train_size = 0.9,test_size=0.1,shuffle=True)

###############################################################################
#                    Hyperparameter optimization
###############################################################################

params={'n_estimators':[10,100,150,200],
        'learning_rate':[0.1,0.075,0.05,0.01,0.001],
        'gamma':[0,1,5.0,10.0],
        'subsample':[0.5,0.75,1.0],
        'reg_lambda':[0.1,1.0,10.0],
        'reg_alpha':[0.1,1.0,10.0],
        'max_depth':[8,16,32,64],
        'objective':['reg:linear','reg:gamma','reg:tweedie']}

XGBR=xgb.XGBRegressor()

FinalModel=GridSearchCV(XGBR,param_grid=params,cv=2,verbose=1,n_jobs=2)

FinalModel.fit(Xtrain,Ytrain)

preds4 = FinalModel.predict(Xtest)
print('Mean Absolute Error = ' +str(sum(np.abs(preds4-Ytest))/len(Ytest)))

plt.figure(3)
plt.plot(preds4,Ytest,'bo',alpha=0.15)
plt.plot([0,17],[0,17],'r')
plt.xlim([0,17])
plt.ylim([0,17])
ax=plt.gca()
PlotStyle(ax,'','Predicted','Real')

###############################################################################
#                     Predictions  
###############################################################################

TestDir=GlobalDirectory+'\\'+'test'

fileNames=[f for f in listdir(TestDir) if isfile(join(TestDir, f))]
FileDirs=[TestDir+'\\' + val for val in fileNames]

SamplesFeatures=[]

for j in range(len(fileNames)):
  
  cFile=pd.read_csv(FileDirs[j])
  sampleData=np.array(cFile['acoustic_data'])
  ScaledTest=MakeScaledSeries(sampleData,MeanGlobal,StdGlobal)
  TestFeatures=CalculateFeatures(ScaledTest,DerOrders)
  SamplesFeatures.append(TestFeatures)

ScaledTest=ToMinMax.transform(SamplesFeatures)
final=FinalModel.predict(ScaledTest)

###############################################################################
#                      Saving Predictions  
###############################################################################
  
PredictionDir=GlobalDirectory+'\\'+'prediction'+'take01'+'.csv'
firstRow=['seg_id','time_to_failure']

with open(PredictionDir,'w',newline='') as output:
        
    writer=csv.writer(output)
    nData=len(final)
    writer.writerow(firstRow)
            
    for k in range(nData):
      cRow=[fileNames[k][0:-4],final[k]]
      writer.writerow(cRow)
        
